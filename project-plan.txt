nest new cirql-backend
cd cirql-backend
# MongoDB
pnpm add @nestjs/mongoose mongoose

# Configuration
pnpm add @nestjs/config

# JWT
pnpm add @nestjs/jwt passport-jwt
pnpm add -D @types/passport-jwt # -D for dev dependency

# Google OAuth
pnpm add @nestjs/passport passport passport-google-oauth20
pnpm add -D @types/passport-google-oauth20

# Swagger
pnpm add @nestjs/swagger swagger-ui-express

# Validation
pnpm add class-validator class-transformer

# Security
pnpm add helmet


PORT=3001
MONGODB_URI=your_mongodb_connection_string
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
GOOGLE_CALLBACK_URL=http://localhost:3001/auth/google/callback
JWT_SECRET=your_super_secret_jwt_key
JWT_EXPIRATION_TIME=3600s
FRONTEND_URL=http://localhost:3000 # Or your frontend's port

nest g module users
nest g service users
nest g controller users --no-spec

nest g module auth
nest g service auth
nest g controller auth --no-spec

pnpm add bcrypt
pnpm add -D @types/bcrypt

pnpm add joi

Okay, here's a concise note summarizing the key configurations and purposes of the 4 different environment setups (2 for backend, 2 for frontend) to help you recall and explain it later:
Core Concept: The goal is flexible authentication across different environments (local/production frontend talking to local/production backend). This is achieved by:
Backend's Passport strategy always using its own environment-specific callback URL (GOOGLE_CALLBACK_TO_BACKEND_URL).
Frontend dynamically sending its own desired callback URL (where it wants to receive the token) to the backend via the state parameter (finalRedirectUri).
Backend validating this finalRedirectUri against a whitelist (ALLOWED_FRONTEND_ORIGINS) before redirecting the user with the JWT.
I. Backend Environment Configurations
(A) Backend - LOCAL DEVELOPMENT (cirql-backend/.env)
NODE_ENV: development
BACKEND_URL: http://localhost:3001
GOOGLE_CALLBACK_TO_BACKEND_URL: http://localhost:3001/auth/google/callback
Purpose: Tells Google where to send the auth code back to this local backend. Must be in Google Console's "Authorized redirect URIs".
FRONTEND_URL: http://localhost:3000
Purpose: Default/fallback URL for the frontend if state is invalid/missing.
ALLOWED_FRONTEND_ORIGINS: http://localhost:3000,https://cirql.vercel.app
Purpose: Whitelist of frontend origins this local backend will trust to redirect to with a token (allows testing local BE with prod FE, or local BE with local FE).
Secrets (MONGODB_URI, JWT_SECRET, GOOGLE_CLIENT_ID/SECRET): Development-specific values.
(B) Backend - PRODUCTION (Platform Env Vars, e.g., on Vercel for cirql-backend)
NODE_ENV: production
BACKEND_URL: https://cirql-backend.vercel.app (your actual deployed backend URL)
GOOGLE_CALLBACK_TO_BACKEND_URL: https://cirql-backend.vercel.app/auth/google/callback
Purpose: Tells Google where to send the auth code back to this production backend. Must be in Google Console's "Authorized redirect URIs".
FRONTEND_URL: https://cirql.vercel.app
Purpose: Default/fallback URL for the production frontend.
ALLOWED_FRONTEND_ORIGINS: https://cirql.vercel.app,http://localhost:3000
Purpose: Whitelist of frontend origins this production backend will trust (allows prod BE with prod FE, or prod BE with local FE for testing).
Secrets (MONGODB_URI, JWT_SECRET, GOOGLE_CLIENT_ID/SECRET): Production-grade, secure values.
II. Frontend Environment Configurations
(C) Frontend - LOCAL DEVELOPMENT (No .env.local; using next.config.js defaults or shell vars)
NEXT_PUBLIC_BACKEND_URL: Typically defaults to http://localhost:3001 (local backend). Can be overridden (e.g., via shell command NEXT_PUBLIC_BACKEND_URL=https://cirql-backend.vercel.app pnpm dev) to point local frontend to production backend for testing.
NEXT_PUBLIC_FRONTEND_URL: http://localhost:3000 (default for local).
finalRedirectUri in state parameter (Dynamically Generated): http://localhost:3000/auth/google/callback
Purpose: Tells the backend (local or prod) where this local frontend expects to receive the token.
(D) Frontend - PRODUCTION (Platform Env Vars, e.g., on Vercel for cirql-frontend)
NEXT_PUBLIC_BACKEND_URL: https://cirql-backend.vercel.app (points to production backend).
NEXT_PUBLIC_FRONTEND_URL: https://cirql.vercel.app.
finalRedirectUri in state parameter (Dynamically Generated): https://cirql.vercel.app/auth/google/callback
Purpose: Tells the production backend where this production frontend expects to receive the token.
Key Takeaway for Explaining Later:
Backend's GOOGLE_CALLBACK_TO_BACKEND_URL is static for its environment (local or prod) and tells Google where to send the initial code.
Frontend's finalRedirectUri (in state) is dynamic and tells the backend where the frontend client wants the final JWT redirect.
Backend's ALLOWED_FRONTEND_ORIGINS acts as a security whitelist for that final JWT redirect, ensuring the backend only sends tokens to trusted frontend origins, regardless of what the state parameter claims. This list should contain both your production frontend origin and http://localhost:3000 in both backend environments to allow flexible testing.
This setup achieves your goal: authentication can work "no matter what the environment is" (local FE to local BE, local FE to prod BE, prod FE to prod BE) because the system is designed to handle these different origin combinations through configuration and the dynamic state parameter.


cirql-backend/
├── .env                  // Your environment variables
├── .eslintrc.js          // ESLint configuration
├── .prettierrc           // Prettier code formatter configuration
├── nest-cli.json         // NestJS CLI configuration
├── package.json          // Project dependencies and scripts
├── pnpm-lock.yaml        // PNPM lockfile
├── tsconfig.build.json   // TypeScript config for building
└── tsconfig.json         // Main TypeScript configuration
└── src/
    ├── main.ts               // Application entry point
    |
    ├── app.controller.ts     // Root controller
    ├── app.service.ts        // Root service
    ├── app.module.ts         // Root module of the application
    |
    ├── auth/
    │   ├── decorators/
    │   │   └── current-user.decorator.ts // Extracts user from request
    │   ├── strategies/
    │   │   ├── google.strategy.ts
    │   │   └── jwt.strategy.ts
    │   ├── auth.controller.ts
    │   ├── auth.service.ts
    │   └── auth.module.ts
    |
    ├── common/
    │   └── pipes/
    │       └── parse-object-id.pipe.ts // Validates MongoDB ObjectIds
    |
    ├── settings/             // Module for user settings (structure inferred)
    │   ├── dto/
    │   │   ├── create-setting.dto.ts
    │   │   └── update-setting.dto.ts
    │   ├── schemas/
    │   │   └── setting.schema.ts
    │   ├── settings.controller.ts
    │   ├── settings.service.ts
    │   └── settings.module.ts
    |
    ├── social/
    │   ├── schemas/
    │   │   ├── friend-request.schema.ts // Manages pending friend requests
    │   │   ├── group.schema.ts          // Defines social groups
    │   │   └── social-profile.schema.ts // Central hub for friends, followers, etc.
    │   ├── followers.controller.ts
    │   ├── followers.service.ts
    │   ├── friends.controller.ts
    │   ├── friends.service.ts
    │   ├── groups.controller.ts
    │   ├── groups.service.ts
    │   ├── recommendations.controller.ts
    │   ├── recommendations.service.ts
    │   ├── social.controller.ts      // Handles blocking and general profile actions
    │   ├── social.service.ts         // Manages the SocialProfile schema
    │   └── social.module.ts          // The central hub that ties the social features together
    |
    └── users/
        ├── dto/
        │   └── update-user.dto.ts
        ├── schemas/
        │   └── user.schema.ts         // The core User model
        ├── users.controller.ts
        ├── users.service.ts
        └── users.module.ts