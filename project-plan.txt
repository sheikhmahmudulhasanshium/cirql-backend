nest new cirql-backend
cd cirql-backend
# MongoDB
pnpm add @nestjs/mongoose mongoose

# Configuration
pnpm add @nestjs/config

# JWT
pnpm add @nestjs/jwt passport-jwt
pnpm add -D @types/passport-jwt # -D for dev dependency

# Google OAuth
pnpm add @nestjs/passport passport passport-google-oauth20
pnpm add -D @types/passport-google-oauth20

# Swagger
pnpm add @nestjs/swagger swagger-ui-express

# Validation
pnpm add class-validator class-transformer

# Security
pnpm add helmet


PORT=3001
MONGODB_URI=your_mongodb_connection_string
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
GOOGLE_CALLBACK_URL=http://localhost:3001/auth/google/callback
JWT_SECRET=your_super_secret_jwt_key
JWT_EXPIRATION_TIME=3600s
FRONTEND_URL=http://localhost:3000 # Or your frontend's port

nest g module users
nest g service users
nest g controller users --no-spec

nest g module auth
nest g service auth
nest g controller auth --no-spec

pnpm add bcrypt
pnpm add -D @types/bcrypt

pnpm add joi

Okay, here's a concise note summarizing the key configurations and purposes of the 4 different environment setups (2 for backend, 2 for frontend) to help you recall and explain it later:
Core Concept: The goal is flexible authentication across different environments (local/production frontend talking to local/production backend). This is achieved by:
Backend's Passport strategy always using its own environment-specific callback URL (GOOGLE_CALLBACK_TO_BACKEND_URL).
Frontend dynamically sending its own desired callback URL (where it wants to receive the token) to the backend via the state parameter (finalRedirectUri).
Backend validating this finalRedirectUri against a whitelist (ALLOWED_FRONTEND_ORIGINS) before redirecting the user with the JWT.
I. Backend Environment Configurations
(A) Backend - LOCAL DEVELOPMENT (cirql-backend/.env)
NODE_ENV: development
BACKEND_URL: http://localhost:3001
GOOGLE_CALLBACK_TO_BACKEND_URL: http://localhost:3001/auth/google/callback
Purpose: Tells Google where to send the auth code back to this local backend. Must be in Google Console's "Authorized redirect URIs".
FRONTEND_URL: http://localhost:3000
Purpose: Default/fallback URL for the frontend if state is invalid/missing.
ALLOWED_FRONTEND_ORIGINS: http://localhost:3000,https://cirql.vercel.app
Purpose: Whitelist of frontend origins this local backend will trust to redirect to with a token (allows testing local BE with prod FE, or local BE with local FE).
Secrets (MONGODB_URI, JWT_SECRET, GOOGLE_CLIENT_ID/SECRET): Development-specific values.
(B) Backend - PRODUCTION (Platform Env Vars, e.g., on Vercel for cirql-backend)
NODE_ENV: production
BACKEND_URL: https://cirql-backend.vercel.app (your actual deployed backend URL)
GOOGLE_CALLBACK_TO_BACKEND_URL: https://cirql-backend.vercel.app/auth/google/callback
Purpose: Tells Google where to send the auth code back to this production backend. Must be in Google Console's "Authorized redirect URIs".
FRONTEND_URL: https://cirql.vercel.app
Purpose: Default/fallback URL for the production frontend.
ALLOWED_FRONTEND_ORIGINS: https://cirql.vercel.app,http://localhost:3000
Purpose: Whitelist of frontend origins this production backend will trust (allows prod BE with prod FE, or prod BE with local FE for testing).
Secrets (MONGODB_URI, JWT_SECRET, GOOGLE_CLIENT_ID/SECRET): Production-grade, secure values.
II. Frontend Environment Configurations
(C) Frontend - LOCAL DEVELOPMENT (No .env.local; using next.config.js defaults or shell vars)
NEXT_PUBLIC_BACKEND_URL: Typically defaults to http://localhost:3001 (local backend). Can be overridden (e.g., via shell command NEXT_PUBLIC_BACKEND_URL=https://cirql-backend.vercel.app pnpm dev) to point local frontend to production backend for testing.
NEXT_PUBLIC_FRONTEND_URL: http://localhost:3000 (default for local).
finalRedirectUri in state parameter (Dynamically Generated): http://localhost:3000/auth/google/callback
Purpose: Tells the backend (local or prod) where this local frontend expects to receive the token.
(D) Frontend - PRODUCTION (Platform Env Vars, e.g., on Vercel for cirql-frontend)
NEXT_PUBLIC_BACKEND_URL: https://cirql-backend.vercel.app (points to production backend).
NEXT_PUBLIC_FRONTEND_URL: https://cirql.vercel.app.
finalRedirectUri in state parameter (Dynamically Generated): https://cirql.vercel.app/auth/google/callback
Purpose: Tells the production backend where this production frontend expects to receive the token.
Key Takeaway for Explaining Later:
Backend's GOOGLE_CALLBACK_TO_BACKEND_URL is static for its environment (local or prod) and tells Google where to send the initial code.
Frontend's finalRedirectUri (in state) is dynamic and tells the backend where the frontend client wants the final JWT redirect.
Backend's ALLOWED_FRONTEND_ORIGINS acts as a security whitelist for that final JWT redirect, ensuring the backend only sends tokens to trusted frontend origins, regardless of what the state parameter claims. This list should contain both your production frontend origin and http://localhost:3000 in both backend environments to allow flexible testing.
This setup achieves your goal: authentication can work "no matter what the environment is" (local FE to local BE, local FE to prod BE, prod FE to prod BE) because the system is designed to handle these different origin combinations through configuration and the dynamic state parameter.
cirql-backend/
├── .env
├── .eslintrc.mjs
├── .gitignore
├── .prettierrc
├── nest-cli.json
├── package.json
├── tsconfig.build.json
├── tsconfig.json
├── src/
│   ├── main.ts
│   ├── app.controller.ts
│   ├── app.module.ts
│   ├── app.service.ts
│   ├── announcement/
│   │   ├── dto/
│   │   │   ├── create-announcement.dto.ts
│   │   │   └── update-announcement.dto.ts
│   │   ├── entities/
│   │   │   └── announcement.entity.ts
│   │   ├── announcement.controller.ts
│   │   ├── announcement.module.ts
│   │   └── announcement.service.ts
│   ├── audit/
│   │   ├── schemas/
│   │   │   └── audit-log.schema.ts
│   │   ├── audit.controller.ts
│   │   ├── audit.module.ts
│   │   └── audit.service.ts
│   ├── auth/
│   │   ├── decorators/
│   │   │   └── current-user.decorator.ts
│   │   ├── dto/
│   │   │   ├── disable-2fa.dto.ts
│   │   │   ├── forgot-password.dto.ts
│   │   │   ├── login-2fa.dto.ts
│   │   │   ├── login.dto.ts
│   │   │   ├── reset-password.dto.ts
│   │   │   └── two-factor-code.dto.ts
│   │   ├── schemas/
│   │   │   ├── password-reset-token.schema.ts
│   │   │   └── two-factor-token.schema.ts
│   │   ├── strategies/
│   │   │   ├── google.strategy.ts
│   │   │   ├── jwt-2fa.strategy.ts
│   │   │   └── jwt.strategy.ts
│   │   ├── auth.controller.ts
│   │   ├── auth.module.ts
│   │   ├── auth.service.ts
│   │   └── encryption.service.ts
│   ├── common/
│   │   ├── decorators/
│   │   │   └── roles.decorator.ts
│   │   ├── enums/
│   │   │   └── role.enum.ts
│   │   ├── guards/
│   │   │   ├── banned-user.guard.ts
│   │   │   ├── optional-auth.guard.ts
│   │   │   └── roles.guard.ts
│   │   └── pipes/
│   │       └── parse-object-id.pipe.ts
│   ├── email/
│   │   ├── email.module.ts
│   │   └── email.service.ts
│   ├── notifications/
│   │   ├── dto/
│   │   │   ├── create-notification.dto.ts
│   │   │   ├── mark-read.dto.ts
│   │   │   └── update-notification.dto.ts
│   │   ├── schemas/
│   │   │   └── notification.schema.ts
│   │   ├── notifications.controller.ts
│   │   ├── notifications.module.ts
│   │   └── notifications.service.ts
│   ├── settings/
│   │   ├── dto/
│   │   │   ├── create-setting.dto.ts
│   │   │   └── update-setting.dto.ts
│   │   ├── schemas/
│   │   │   └── setting.schema.ts
│   │   ├── settings.controller.ts
│   │   ├── settings.module.ts
│   │   └── settings.service.ts
│   ├── social/
│   │   ├── dto/
│   │   │   ├── create-group.dto.ts
│   │   │   ├── manage-group-member.dto.ts
│   │   │   ├── send-friend-request.dto.ts
│   │   │   └── update-group.dto.ts
│   │   ├── schemas/
│   │   │   ├── friend-request.schema.ts
│   │   │   ├── group.schema.ts
│   │   │   └── social-profile.schema.ts
│   │   ├── followers.controller.ts
│   │   ├── followers.service.ts
│   │   ├── friends.controller.ts
│   │   ├── friends.service.ts
│   │   ├── groups.controller.ts
│   │   ├── groups.service.ts
│   │   ├── recommendations.controller.ts
│   │   ├── recommendations.service.ts
│   │   ├── social.controller.ts
│   │   ├── social.module.ts
│   │   └── social.service.ts
│   ├── support/
│   │   ├── dto/
│   │   │   ├── create-appeal.dto.ts
│   │   │   ├── create-public-ticket.dto.ts
│   │   │   ├── create-support.dto.ts
│   │   │   └── update-support.dto.ts
│   │   ├── schemas/
│   │   │   ├── message.schema.ts
│   │   │   └── ticket.schema.ts
│   │   ├── support.controller.ts
│   │   ├── support.module.ts
│   │   └── support.service.ts
│   ├── upload/
│   │   ├── schemas/
│   │   │   └── media.schema.ts
│   │   ├── attachment.service.ts
│   │   ├── media.controller.ts
│   │   ├── media.service.ts
│   │   └── upload.module.ts
│   └── users/
│       ├── dto/
│       │   ├── ban-user.dto.ts
│       │   ├── public-profile.dto.ts
│       │   ├── update-user-roles.dto.ts
│       │   └── update-user.dto.ts
│       ├── schemas/
│       │   └── user.schema.ts
│       ├── users.controller.ts
│       ├── users.module.ts
│       └── users.service.ts
├── dist/
├── node_modules/
├── public/
└── test/

        {
  "title": "CiRQL is Born! 🎉",
  "content": "On May 15, 2025, CiRQL was created to help people connect meaningfully in private spaces. We're building a better way to stay connected with the people and topics that matter to you. Join us!",
  "type": "Company News",  "visible": true,
  "expirationDate": null,
  "imageUrl": "https://raw.githubusercontent.com/sheikhmahmudulhasanshium/cirql-frontend/refs/heads/main/public/logo.png",
  "linkUrl": "https://cirql.vercel.app/"
}
{
  "title": "Backend is LIVE! 🚀",
  "content": "Great news! The backend is now up and running and connected with the frontend. 🎉 Launched on May 28th, 2025! Check out the API at https://cirql-backend.vercel.app/api/. Exciting times ahead! 🥳",
  "type": "Company News",
  "visible": true,
  "expirationDate": null,
  "imageUrl": "https://raw.githubusercontent.com/sheikhmahmudulhasanshium/cirql-backend/refs/heads/main/public/logo.png",
  "linkUrl": "https://cirql-backend.vercel.app/api/"
}

Changelog - v1.2.1 (2024-06-29)
This is a critical security and stability release that overhauls the Two-Factor Authentication (2FA) deactivation process, hardens backend validation, and resolves a series of logic flaws that were causing application crashes and blocking core functionality.
🔒 Security Enhancements
Secure OTP-Based 2FA Deactivation Implemented: The entire flow for disabling 2FA has been rebuilt from the ground up to eliminate a critical security and logic flaw.
Password Verification Removed: The previous, flawed implementation that incorrectly required a password for deactivation has been completely removed.
New Secure Endpoint (POST /auth/2fa/request-disable-code): A new endpoint has been introduced that allows a logged-in user to request a secure One-Time Passcode (OTP), which is then sent to their registered email address. This step verifies user intent and control over the account.
Hardened Disable Endpoint (POST /auth/2fa/disable): The final deactivation endpoint no longer accepts a password. It now requires the 6-digit OTP from the email, which is securely verified on the backend against the hashed code in the database before proceeding. This flow is now secure and consistent for all users, regardless of whether they signed up via Google or email/password.
🐛 Critical Bug Fixes & Stability Improvements
Fixed 500 Internal Server Error on 2FA Login: Resolved a fatal crash (TypeError: Cannot read properties of undefined (reading 'length')) that occurred during the final step of 2FA login.
Root Cause: The User schema had select: false on the loginHistory field, preventing it from being fetched from the database. The updateLastLogin service method then crashed when trying to access this non-existent property.
Solution: The database queries in UsersService (findByIdForAuth and findOneByEmailForAuth) have been updated to explicitly select +loginHistory, ensuring the complete user document is available and preventing the crash.
Resolved 400 Bad Request on API Calls: Fixed persistent validation errors that were blocking functionality like disabling 2FA.
Root Cause: A logic mismatch between frontend payloads and backend validation rules. The frontend was sending an empty string ("") for optional fields, which failed validation rules like @MinLength().
Solution: The frontend logic in Disable2faDialog.tsx was made more intelligent. It now conditionally builds the request payload, completely omitting optional fields when they are not needed, satisfying the backend's @IsOptional() validation rule correctly.
Corrected TypeScript Type Mismatches: Resolved a build-blocking TypeScript error (Property 'googleId' does not exist on type 'User') in the frontend.
Solution: The User interface within the frontend's AuthContext.tsx was updated to include the optional googleId property, bringing the frontend type definition in sync with the actual data structure provided by the backend. This ensures type safety and allows for more robust conditional logic in components.